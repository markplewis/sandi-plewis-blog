@design-tokens url("./design-tokens.json") format("style-dictionary3");

/*
Global styles
See: https://nextjs.org/docs/basic-features/built-in-css-support

We're respecting viewport "safe areas" via special, predefined CSS environment variables.
See: https://webkit.org/blog/7929/designing-websites-for-iphone-x/

TODO: `viewport-fit=cover` doesn't seem to be working in Chrome for iOS:
See: https://bugs.chromium.org/p/chromium/issues/detail?id=1150075
See: https://stackoverflow.com/questions/61527166/ios-chrome-not-respecting-safe-area-inset-for-notch
*/
:root {
  --focus-outline-color: steelblue;
  /* Box shadows */
  --box-shadow: 2px 2px 5px 2px rgb(0% 0% 0% / 10%);
  --box-shadow-strong: 0px 0px 8px 4px rgb(0% 0% 0% / 10%);
  /* Horizontal page margins */
  --column-margin: 16px;
  /* Minimum width is `env(safe-area-inset-left)` but can be up to `var(--column-margin)` */
  --column-margin-left: max(var(--column-margin), env(safe-area-inset-left));
  --column-margin-right: max(var(--column-margin), env(safe-area-inset-right));
  /* Font sizes */
  --font-size-12: 0.75rem;
  --font-size-16: 1rem;
  --font-size-20: 1.25rem;
  --font-size-24: 1.5rem;
  --font-size-28: 1.75rem;
  --font-size-32: 2rem;
  --font-size-36: 2.25rem;
  --font-size-40: 2.5rem;
  /* Font weights and styles */
  --font-weight-bold: 700;
  --font-weight-normal: 400;
  /* Colors */
  --color-white: #fff;
  --color-black: #000;
  --color-light-gray-rgb: 102 102 102;
  --color-light-gray: rgb(var(--color-light-gray-rgb));
  --color-dark-gray-rgb: 51 51 51;
  --color-dark-gray: rgb(var(--color-dark-gray-rgb));
  --color-darkest-gray: #191919;
  --color-font-base: var(--color-dark-gray);
  /* Page colors */
  --page-color-primary: var(--color-dark-gray);
  --page-color-primary-rgb: var(--color-dark-gray-rgb);
  --page-color-primary-text: var(--color-white);
  --page-color-secondary: var(--color-light-gray);
  --page-color-secondary-rgb: var(--color-light-gray-rgb);
  --page-color-secondary-text: var(--color-white);
}
/* It isn't possible to use CSS custom properties in media queries, however, with a little help
from PostCSS, we can use custom CSS environment variables (see: `styles/css-env-variables.js`) */
@media (min-width: token("breakpoints.w480" to rem)) {
  :root {
    --column-margin: 24px;
  }
}
@media (min-width: token("breakpoints.w768" to rem)) {
  :root {
    --column-margin: 32px;
  }
}
@media (min-width: token("breakpoints.w1600" to rem)) {
  :root {
    --column-margin: 64px;
  }
}
@media (min-width: token("breakpoints.w1976" to rem)) {
  /* 64 + 1848 + 64 = 1976 */
  /* TODO: set `max-width 1848px` on inner-column elements (which I'll need to create), so that
  header and page body can be horizontally centered while still having full-width background colors */
}
* {
  line-height: inherit; /* Inherit value from modern-normalize.css */
}
html,
body {
  width: 100%;
  /* TODO: what is causing overflow on the Novel page? */
  overflow-x: hidden;
}
body {
  font-size: 100%; /* Default is `16px` in most browsers */
  font-family: var(--font-family-base);
  line-height: 1.5;
  color: var(--color-font-base);
  background-color: var(--color-white);
}
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--font-family-heading);
  line-height: 1.2;
}
h1 {
  font-size: var(--font-size-36);
}
h2 {
  font-size: var(--font-size-28);
}
h3 {
  font-size: var(--font-size-24);
}
h4 {
  font-size: var(--font-size-20);
}
h5,
h6 {
  font-size: var(--font-size-16);
}
h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
figure,
blockquote {
  /* See: https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/ */
  margin: 1em 0;
}
blockquote {
  font-style: italic;
}

/* See: https://css-tricks.com/links-inline-svg-staying-target-events/ */
a > svg,
button > svg {
  pointer-events: none;
}

/*
Note: We could use `box-shadow` instead of `outline`, but focus rings won't display
correctly when an `<a>` wraps an `<img>` element, unless that `<a>` has `display: inline-block`
applied. `box-shadow` is nice because it automatically follows the contours of the element's
`border-radius`, whereas `outline` does not (although there are plans to change this:
https://bugs.chromium.org/p/chromium/issues/detail?id=81556), but we've opted to use `outline`
in order to avoid having to apply `display: inline-block` to every `<a>` that wraps an `<img>`.
See also: https://github.com/microsoft/fluentui/issues/6944
*/
:focus,
:hover:focus {
  outline: 2px solid var(--focus-outline-color);
  outline-offset: 2px;
}

a {
  text-underline-offset: 3px;
  text-decoration-thickness: 1px;
}
a:hover,
a:focus,
a:active {
  text-decoration-thickness: 2px;
}

/* Responsive images */
img {
  width: 100%;
  height: auto;
  display: block;
}

/* Utilities */
/* TODO: move these into a separate file? */

/* https://www.youtube.com/watch?v=81pnuZFarRw */
/* .full-width {
  box-shadow: 0 0 0 100vmax var(--color-white);
  clip-path: inset(0 -100vmax);
} */

/*
Controversial "fix" for sub-pixel font rendering "problems" in various browsers
See: https://usabilitypost.com/2012/11/05/stop-fixing-font-smoothing/
See: https://github.com/google/fonts/issues/1170#issuecomment-691405519
Maybe we should use `text-rendering` instead?
https://css-tricks.com/almanac/properties/t/text-rendering/
*/
/*
.u-font-rendering-fix {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizelegibility;
}
*/

.u-button-appearance-none {
  cursor: pointer;
  border: none;
  border-radius: 0;
  background-color: transparent;
  appearance: none;
  display: block;
}

/*
Hide only visually, but have it available for screen readers.
Warning: elements containing focusable elements (e.g. links, buttons, etc.)
should not be hidden in this way, because sighted keyboard users will not be
able to see the focused element.
See: http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
*/
.u-visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  /* TODO: Refactor this to avoid using clip, because it's deprecated
  See: https://developer.mozilla.org/en-US/docs/Web/CSS/clip */
  clip: rect(0 0 0 0);
  border: 0;
}

.u-no-scroll--not-fixed {
  /* width: 100%; */
  height: 100%;
  overflow: hidden;
}

.u-content-hidden main {
  display: none;
}

/* Hide visually and also from screen readers */
[hidden],
.u-hidden {
  display: none !important;
}
