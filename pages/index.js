import { PreviewSuspense } from "next-sanity/preview";
import { lazy } from "react";
import { DocumentsCount, query } from "components/DocumentsCount";
import { client } from "lib/sanity.client";

const PreviewDocumentsCount = lazy(() => import("components/PreviewDocumentsCount"));

export const getStaticProps = async ({ preview = false, previewData = {} }) => {
  // @ts-ignore
  if (preview && previewData?.token) {
    // @ts-ignore
    return { props: { preview, token: previewData.token } };
  }
  const data = await client.fetch(query);
  return { props: { preview, data } };
};

export default function IndexPage({ preview, token, data }) {
  if (preview) {
    return (
      <PreviewSuspense fallback="Loading...">
        <PreviewDocumentsCount token={token} />
      </PreviewSuspense>
    );
  }
  return <DocumentsCount data={data} />;
}

// ------------------------------------- //

// // This function gets called at build time on the server side ("Static Generation"). It may be
// // called again, via a serverless function ("Incremental Static Regeneration"), if revalidation
// // is enabled and a new request comes in (see below). See:
// // https://nextjs.org/docs/basic-features/data-fetching/get-static-props
// // https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration

// export async function getStaticProps({ params }) {
//   const post = await client.fetch(postQuery, {
//     slug: params.slug
//   });
//   return {
//     props: {
//       data: { post }
//     },
//     // Return a 404 status and page if the post doesn't exist yet or no longer exists
//     notFound: !post,
//     // When `revalidate` is `false` (its default value) the page will be cached as built until your
//     // next build. Otherwise, Next.js will attempt to re-generate the page when a request comes in,
//     // once every X seconds (at most).
//     revalidate: 10 // In seconds
//   };
// }

// // Specify dynamic routes to pre-render pages based on data.
// // This function gets called at build time on the server side ("Static Generation"). It may be
// // called again, via a serverless function ("Incremental Static Regeneration"), if the requested
// // path has not been generated yet (i.e. when new posts are published after a build). Without this
// // mechanism in place, the site would need to be rebuilt every time a new post is published.
// // See: https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation

// export async function getStaticPaths() {
//   // Pre-render only these paths at build time
//   const paths = await client.fetch(
//     `*[_type == "post" && defined(slug.current)]{ "params": { "slug": slug.current } }`
//   );
//   // `fallback: blocking` will server-render pages on demand if the path
//   // wasn't statically pre-rendered (i.e. didn't exist at build time)
//   // https://nextjs.org/docs/basic-features/data-fetching#fallback-blocking
//   // https://nextjs.org/docs/basic-features/data-fetching#the-fallback-key-required
//   return {
//     paths,
//     fallback: "blocking"
//   };
// }

// // More information about CSR (Client-Side Rendering), SSR (Server-Side Rendering),
// // SSG (Static-Site Generation), and ISR (Incremental Static Regeneration):
// // https://youtu.be/f1rF9YKm1Ms

// ------------------------------------- //

// import Head from "next/head";
// import Image from "next/image";
// import { Inter } from "@next/font/google";
// import styles from "../styles/Home.module.css";
// import styled from "styled-components";

// const inter = Inter({ subsets: ["latin"] });

// const StyledP = styled.div`
//   color: red;
// `;

// export default function Home() {
//   return (
//     <>
//       <Head>
//         <title>Create Next App</title>
//         <meta name="description" content="Generated by create next app" />
//         <meta name="viewport" content="width=device-width, initial-scale=1" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>
//       <main className={styles.main}>
//         <div className={styles.description}>
//           <div role="heading" aria-level={1}>
//             welcome to next.js!
//           </div>
//           <StyledP>
//             Get started by editing&nbsp;
//             <code className={styles.code}>pages/index.js</code>
//           </StyledP>
//           <div>
//             <a
//               href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//               target="_blank"
//               rel="noopener noreferrer">
//               By{" "}
//               <Image
//                 src="/vercel.svg"
//                 alt="Vercel Logo"
//                 className={styles.vercelLogo}
//                 width={100}
//                 height={24}
//                 priority
//               />
//             </a>
//           </div>
//         </div>

//         <div className={styles.center}>
//           <Image
//             className={styles.logo}
//             src="/next.svg"
//             alt="Next.js Logo"
//             width={180}
//             height={37}
//             priority
//           />
//           <div className={styles.thirteen}>
//             <Image src="/thirteen.svg" alt="13" width={40} height={31} priority />
//           </div>
//         </div>

//         <div className={styles.grid}>
//           <a
//             href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//             className={styles.card}
//             target="_blank"
//             rel="noopener noreferrer">
//             <h2 className={inter.className}>
//               Docs <span>-&gt;</span>
//             </h2>
//             <p className={inter.className}>
//               Find in-depth information about Next.js features and&nbsp;API.
//             </p>
//           </a>

//           <a
//             href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//             className={styles.card}
//             target="_blank"
//             rel="noopener noreferrer">
//             <h2 className={inter.className}>
//               Learn <span>-&gt;</span>
//             </h2>
//             <p className={inter.className}>
//               Learn about Next.js in an interactive course with&nbsp;quizzes!
//             </p>
//           </a>

//           <a
//             href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//             className={styles.card}
//             target="_blank"
//             rel="noopener noreferrer">
//             <h2 className={inter.className}>
//               Templates <span>-&gt;</span>
//             </h2>
//             <p className={inter.className}>
//               Discover and deploy boilerplate example Next.js&nbsp;projects.
//             </p>
//           </a>

//           <a
//             href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
//             className={styles.card}
//             target="_blank"
//             rel="noopener noreferrer">
//             <h2 className={inter.className}>
//               Deploy <span>-&gt;</span>
//             </h2>
//             <p className={inter.className}>
//               Instantly deploy your Next.js site to a shareable URL with&nbsp;Vercel.
//             </p>
//           </a>
//         </div>
//       </main>
//     </>
//   );
// }
